sorting 

bubble sort.cpp
#include <iostream>
#include <chrono>
using namespace std;
using namespace std::chrono;
void bubblesort(int arr[], int size)
{
    for (int i = 0; i < size; i++)
    {
        for (int j = 0; j < size - i; j++)
        {
            if (arr[j] > arr[j + 1])
            {
                int temp = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = temp;
            }
        }
    }
}
int main()
{
    int *ptr, size;
    cout << "enter the size of array";
    cin >> size;
    ptr = new int[size];
    cout << "enter elements of array";
    for (int i = 0; i < size; i++)
    {
        cin >> ptr[i];
    }
    cout << "array before sorting:" << endl;
    for (int i = 0; i < size; i++)
    {
        cout << ptr[i] << "\t";
    }
    auto start = high_resolution_clock::now();
    bubblesort(ptr, size);
    auto stop = high_resolution_clock::now();
    auto duration = duration_cast<microseconds>(stop - start);
    cout << endl
         << "array after sorting:" << endl;
    for (int i = 0; i < size; i++)
    {
        cout << ptr[i] << "\t";
    }
    cout<<endl << "Time taken : "
         << duration.count() << " microseconds" << endl;
    return 0;
}






*insertion sorting.cpp

#include <iostream>
#include <chrono>
using namespace std::chrono;
using namespace std;
void insertionsort(int arr[], int size)
{
    int temp, j, i;
    for (i = 1; i < size; i++)
    {
        int i, j, temp;
        for (i = 1; i < size; i++)
        {
            temp = arr[i];
            j = i - 1;

            while (j >= 0 && arr[j] > temp)
            {
                arr[j + 1] = arr[j];
                j = j - 1;
            }
            arr[j + 1] = temp;
        }
    }
}
int main()
{
    int *ptr, size;
    cout << "enter the size of array";
    cin >> size;
    ptr = new int[size];
    cout << "enter elements of array";
    for (int i = 0; i < size; i++)
    {
        cin >> ptr[i];
    }
    cout << "array before sorting:" << endl;
    for (int i = 0; i < size; i++)
    {
        cout << ptr[i] << "\t";
    }
    auto start = high_resolution_clock::now();
    insertionsort(ptr, size);
    auto stop = high_resolution_clock::now();
    auto duration = duration_cast<microseconds>(stop - start);
    cout << endl
         << "array after sorting:" << endl;
    for (int i = 0; i < size; i++)
    {
        cout << ptr[i] << "\t";
    }
    cout<<endl << "Time taken : "
         << duration.count() << " microseconds" << endl;

    return 0;
}
 







*merge sort.cpp
#include <iostream>
#include <chrono>
using namespace std;
using namespace std::chrono;
void merge(int arr[], int beg, int mid, int end, int size)
{
    int i = beg, j = mid+1, index = 0;

    int *temp;
    temp = new int[size];
    while (i <= mid && j <= end)
    {
        if (arr[i] < arr[j])
        {
            temp[index] = arr[i];
            i++;
        }
        else
        {
            temp[index] = arr[j];
            j++;
        }
        index++;
    }
    if (i > mid)
    {
        while (j <= end)
        {
            temp[index] = arr[j];
            j++;
            index++;
        }
    }
    if (j > end)
    {
        while (i <= mid)
        {
            temp[index] = arr[i];
            i++;
            index++;
        }
    }
    j=0;
    for (i =beg; i <= end; i++)
    {
        arr[i] = temp[j];
        j++;
    }
}
void mergesort(int arr[], int beg, int end, int size)
{
    if (beg < end)
    {
        int mid = (beg + end) / 2;

        mergesort(arr, beg, mid, size);
        mergesort(arr, mid + 1, end, size);
        merge(arr, beg, mid, end, size);
    }
}

int main()
{
    int *ptr, size;
    cout << "enter the size of array";
    cin >> size;
    ptr = new int[size];
    cout << "enter elements of array";
    for (int i = 0; i < size; i++)
    {
        cin >> ptr[i];
    }
    cout << "array before sorting:" << endl;
    for (int i = 0; i < size; i++)
    {
        cout << ptr[i] << "\t";
    }
    auto start = high_resolution_clock::now();
    mergesort(ptr, 0, size - 1, size);
    auto stop = high_resolution_clock::now();
    auto duration = duration_cast<nanoseconds>(stop - start);
    cout << endl
         << "array after sorting:" << endl;
    for (int i = 0; i < size; i++)
    {
        cout << ptr[i] << "\t";
    }
    cout <<endl<< "Time taken : "
         << duration.count() << " microseconds" << endl;
    return 0;
}







*quick sorting.cpp
#include <iostream>
#include <chrono>
using namespace std;
using namespace std::chrono;
int partition(int arr[], int beg, int end)
{
    int pivot = arr[end];
    int i = (beg - 1);

    for (int j = beg; j <= end - 1; j++)
    {

        if (arr[j] < pivot)
        {
            i++;
            int x = arr[i];
            arr[i] = arr[j];
            arr[j] = x;
        }
    }
    int x = arr[i + 1];
    arr[i + 1] = arr[end];
    arr[end] = x;
    return (i + 1);
}

void quicksort(int arr[], int beg, int end)
{
    if (beg < end)
    {

        int p = partition(arr, beg, end);
        quicksort(arr, beg, p - 1);
        quicksort(arr, p + 1, end);
    }
}

int main()
{
    int *ptr, size;
    cout << "enter the size of array";
    cin >> size;
    ptr = new int[size];
    cout << "enter elements of array";
    for (int i = 0; i < size; i++)
    {
        cin >> ptr[i];
    }
    cout << "array before sorting:" << endl;
    for (int i = 0; i < size; i++)
    {
        cout << ptr[i] << "\t";
    }
    auto start = high_resolution_clock::now();
    quicksort(ptr, 0, size);
    auto stop = high_resolution_clock::now();
    auto duration = duration_cast<microseconds>(stop - start);
    cout << endl
         << "array after sorting:" << endl;
    for (int i = 0; i < size; i++)
    {
        cout << ptr[i] << "\t";
    }
    cout << endl
         << "Time taken : "
         << duration.count() << " microseconds" << endl;
    return 0;
}









*selection sorting.cpp
#include <iostream>

#include <chrono>
using namespace std::chrono;
using namespace std;
void selectionsort(int arr[], int size)
{
    int min;
    for (int i = 0; i < size; i++)
    {
        min = i;
        for (int j = i + 1; j < size; j++)
        {

            if (arr[j] < arr[min])
            {
                min = j;
            }
        }
        int temp = arr[i];
        arr[i] = arr[min];
        arr[min] = temp;
    }
}
int main()
{
    int *ptr, size;
    cout << "enter the size of array";
    cin >> size;
    ptr = new int[size];
    cout << "enter elements of array";
    for (int i = 0; i < size; i++)
    {
        cin >> ptr[i];
    }
    cout << "array before sorting:" << endl;
    for (int i = 0; i < size; i++)
    {
        cout << ptr[i] << "\t";
    }
auto start = high_resolution_clock::now();
    selectionsort(ptr, size);
auto stop = high_resolution_clock::now();
auto duration = duration_cast<microseconds>(stop - start);
    cout << endl
         << "array after sorting:" << endl;
    for (int i = 0; i < size; i++)
    {
        cout << ptr[i] << "\t";
    }

cout <<endl<< "Time taken : "
     << duration.count() << " microseconds" << endl;
    return 0;
}








